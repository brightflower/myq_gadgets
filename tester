#!/usr/bin/env perl

# Copyright (c) 2008 Yahoo! Inc.  All rights reserved.  The copyrights 
# embodied in the content of this file are licensed by Yahoo! Inc.  
# under the BSD (revised) open source license

use strict;

# Enable unicode output (microseconds units designator)
use utf8;
binmode(STDOUT, ":utf8");


use FindBin;
use lib "$FindBin::Bin";

use MySQL_Script_Utils;

sub assert {
	my( $name, $expected, $method ) = (shift, shift, shift);
	
	my $result = $method->(@_);
	
	if( $result ne $expected ) {
		die "$name: Results mismatch: '$result' != '$expected'\n";
	} else {
		print "$name: pass\n";
	}
}

# Test numbers
assert( 'one is the lonliest number', '1', \&format_number, 1, 0, 3 );
assert( 'one point oh', '1.0', \&format_number, 1, 1, 3 );
assert( 'five hundred', '500', \&format_number, 500, 0, 3 );

assert( 'one kay', '1k', \&format_number, 1000, 0, 3 );
assert( 'one zero zero zero', '1000', \&format_number, 1000, 0, 4 );

assert( 'round up to 1k', '1k', \&format_number, 501, 0, 2 );
assert( 'round down to 0k', '0k', \&format_number, 500, 0, 2 ); # sprintf rounds 0.5 down

assert( 'twelve k', '12k', \&format_number, 12300, 0, 4 );
assert( 'one twenty three k', '123k', \&format_number, 123000, 0, 4 );

assert( 'twelve m', '12m', \&format_number, 12300000, 0, 4 );
assert( 'twelve point three m', '12.3m', \&format_number, 12300000, 0, 5 );



# Test memory
assert( 'one bee', '1b', \&format_memory, 1, 0, 3 );
assert( 'one point nil', '1b', \&format_memory, 1, 1, 3 );
assert( 'one point oh', '1.0b', \&format_memory, 1, 1, 4 );

assert( 'five oh oh rounded down', '0K', \&format_memory, 500, 0, 3 );
assert( 'five fifty rounded up', '1K', \&format_memory, 550, 0, 3 );
assert( 'five fifty bee', '550b', \&format_memory, 550, 0, 4 );

assert( 'one kay', '1K', \&format_memory, 1000, 0, 3 );
assert( 'one zero zero zero bee', '1000b', \&format_memory, 1000, 0, 5 );
assert( 'one point oh kay', '1.0K', \&format_memory, 1000, 0, 4 );

assert( 'one oh oh one bee', '1001b', \&format_memory, 1001, 0, 5 );
assert( 'one poing oh kay', '1.0K', \&format_memory, 1001, 0, 4 );


assert( 'round up to one kay', '1K', \&format_memory, 550, 0, 2 );
assert( 'round down to 0K', '0K', \&format_memory, 500, 0, 2 ); # sprintf rounds 0.5 down

assert( 'twelve kay', '12K', \&format_memory, 12300, 0, 4 );
assert( 'one twenty three kay', '120K', \&format_memory, 123000, 0, 4 );

assert( 'twelve em', '12M', \&format_memory, 12300000, 0, 4 );
assert( 'eleven point seven em', '11.7M', \&format_memory, 12300000, 0, 5 );

